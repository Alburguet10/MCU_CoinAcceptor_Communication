
AVRASM ver. 2.1.30  C:\Users\asus\Desktop\Lenguajes y Traductores\Códigos\Comunicación_con_Aceptador\Debug\List\Comunicación_Aceptador.asm Tue Nov 23 17:09:34 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00003d 0650
00003e 7a01
00003f 0c14
000040 ffff      	.DB  0x50,0x6,0x1,0x7A,0x14,0xC,0xFF,0xFF
000041 0000
C:\Users\asus\Desktop\Lenguajes y Traductores\Códigos\Comunicación_con_Aceptador\Debug\List\Comunicación_Aceptador.asm(1134): warning: .cseg .db misalignment - padding zero byte
000042 0011      	.DB  0x0,0x0,0x11
                 _0x4:
000043 0250
000044 7a01
000045 0b14
C:\Users\asus\Desktop\Lenguajes y Traductores\Códigos\Comunicación_con_Aceptador\Debug\List\Comunicación_Aceptador.asm(1136): warning: .cseg .db misalignment - padding zero byte
000046 0014      	.DB  0x50,0x2,0x1,0x7A,0x14,0xB,0x14
                 _0x5:
000047 0350
000048 7a01
000049 0d14
00004a fe13      	.DB  0x50,0x3,0x1,0x7A,0x14,0xD,0x13,0xFE
                 _0x6:
00004b 0250
00004c 7a01
00004d 0a14
C:\Users\asus\Desktop\Lenguajes y Traductores\Códigos\Comunicación_con_Aceptador\Debug\List\Comunicación_Aceptador.asm(1140): warning: .cseg .db misalignment - padding zero byte
00004e 0015      	.DB  0x50,0x2,0x1,0x7A,0x14,0xA,0x15
                 
                 __GLOBAL_INI_TBL:
00004f 000b      	.DW  0x0B
000050 0300      	.DW  _coinType
000051 007a      	.DW  _0x3*2
                 
000052 0007      	.DW  0x07
000053 032d      	.DW  _poll
000054 0086      	.DW  _0x4*2
                 
000055 0008      	.DW  0x08
000056 0343      	.DW  _dispenseUno
000057 008e      	.DW  _0x5*2
                 
000058 0007      	.DW  0x07
000059 0359      	.DW  _tubeStatus
00005a 0096      	.DW  _0x6*2
                 
                 _0xFFFFFFFF:
00005b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005c 94f8      	CLI
00005d 27ee      	CLR  R30
00005e bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005f e0f1      	LDI  R31,1
000060 bff5      	OUT  MCUCR,R31
000061 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e0a0      	LDI  R26,LOW(__SRAM_START)
00006b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006c 93ed      	ST   X+,R30
00006d 9701      	SBIW R24,1
00006e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006f e9ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000070 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000071 9185      	LPM  R24,Z+
000072 9195      	LPM  R25,Z+
000073 9700      	SBIW R24,0
000074 f061      	BREQ __GLOBAL_INI_END
000075 91a5      	LPM  R26,Z+
000076 91b5      	LPM  R27,Z+
000077 9005      	LPM  R0,Z+
000078 9015      	LPM  R1,Z+
000079 01bf      	MOVW R22,R30
00007a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007b 9005      	LPM  R0,Z+
00007c 920d      	ST   X+,R0
00007d 9701      	SBIW R24,1
00007e f7e1      	BRNE __GLOBAL_INI_LOOP
00007f 01fb      	MOVW R30,R22
000080 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000081 e0e0      	LDI  R30,__GPIOR0_INIT
000082 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000083 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000084 bfed      	OUT  SPL,R30
000085 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000086 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000087 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000088 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000089 940c 008b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*
                 ; * Comunicación_Aceptador.c
                 ; *
                 ; * Created: 23/11/2021 04:53:26 p. m.
                 ; * Author: Eva Beltrán, Emiliano Velázquez, Alan Burguete
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;//Intrucción Coin Type
                 ;unsigned char coinType[11]           = {0x50,0x06,0x01,0x7A,0x14,0x0C,0xFF,0xFF,0x00,0x00,0x11};
                 
                 	.DSEG
                 ;unsigned respuestaCoinType[17];
                 ;//Instrucción Poll
                 ;unsigned char poll[7]                = {0x50,0x02,0x01,0x7A,0x14,0x0B,0x14};
                 ;unsigned char respuestaPoll[15];
                 ;//Instrucción Dispense
                 ;unsigned char dispenseUno[8]         = {0x50,0x03,0x01,0x7A,0x14,0x0D,0x13,0xFE};
                 ;unsigned char respuestaDispense[14];
                 ;//Instrucción Tube Status
                 ;unsigned char tubeStatus[7]           = {0x50,0x02,0x01,0x7A,0x14,0x0A,0x15};
                 ;unsigned char respuestaTubeStatus [32];
                 ;
                 ;int i;
                 ;unsigned int contador = 0;
                 ;
                 ;void main(void)
                 ; 0000 001D {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001E     // USART initialization
                 ; 0000 001F     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0020     // USART Receiver: On
                 ; 0000 0021     // USART Transmitter: On
                 ; 0000 0022     // USART0 Mode: Asynchronous
                 ; 0000 0023     // USART Baud Rate: 9600 (Double Speed Mode)
                 ; 0000 0024     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (1<<U2X0) | (0<<MPCM0);
00008b e0e2      	LDI  R30,LOW(2)
00008c 93e0 00c0 	STS  192,R30
                 ; 0000 0025     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00008e e1e8      	LDI  R30,LOW(24)
00008f 93e0 00c1 	STS  193,R30
                 ; 0000 0026     UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000091 e0e6      	LDI  R30,LOW(6)
000092 93e0 00c2 	STS  194,R30
                 ; 0000 0027     UBRR0H=0x00;
000094 e0e0      	LDI  R30,LOW(0)
000095 93e0 00c5 	STS  197,R30
                 ; 0000 0028     UBRR0L=0x0C;
000097 e0ec      	LDI  R30,LOW(12)
000098 93e0 00c4 	STS  196,R30
                 ; 0000 0029     DDRD.6 = 1;
00009a 9a56      	SBI  0xA,6
                 ; 0000 002A     DDRD.7 = 1;
00009b 9a57      	SBI  0xA,7
                 ; 0000 002B 
                 ; 0000 002C     //Enviar datos de Coin Type
                 ; 0000 002D      for(i = 0; i < 11; i++)
00009c 940e 019b 	CALL SUBOPT_0x0
                 _0xC:
00009e 940e 01a1 	CALL SUBOPT_0x1
0000a0 971b      	SBIW R26,11
0000a1 f44c      	BRGE _0xD
                 ; 0000 002E        putchar(coinType[i]);
0000a2 940e 01a6 	CALL SUBOPT_0x2
0000a4 50e0      	SUBI R30,LOW(-_coinType)
0000a5 4ffd      	SBCI R31,HIGH(-_coinType)
0000a6 81a0      	LD   R26,Z
0000a7 d0e9      	RCALL _putchar
0000a8 940e 01ab 	CALL SUBOPT_0x3
0000aa cff3      	RJMP _0xC
                 _0xD:
                 ; 0000 0031 while (!( (*(unsigned char *) 0xc0) & (1<<5       )));
                 _0xE:
0000ab 91e0 00c0 	LDS  R30,192
0000ad 72e0      	ANDI R30,LOW(0x20)
0000ae f3e1      	BREQ _0xE
                 ; 0000 0032      for(i = 0;  i < 17; i++)
0000af 940e 019b 	CALL SUBOPT_0x0
                 _0x12:
0000b1 940e 01a1 	CALL SUBOPT_0x1
0000b3 9751      	SBIW R26,17
0000b4 f49c      	BRGE _0x13
                 ; 0000 0033         respuestaCoinType[i] = getchar();
0000b5 940e 01a6 	CALL SUBOPT_0x2
0000b7 e0ab      	LDI  R26,LOW(_respuestaCoinType)
0000b8 e0b3      	LDI  R27,HIGH(_respuestaCoinType)
0000b9 0fee      	LSL  R30
0000ba 1fff      	ROL  R31
0000bb 0fea      	ADD  R30,R26
0000bc 1ffb      	ADC  R31,R27
0000bd 93ff      	PUSH R31
0000be 93ef      	PUSH R30
0000bf d0ca      	RCALL _getchar
0000c0 91af      	POP  R26
0000c1 91bf      	POP  R27
0000c2 e0f0      	LDI  R31,0
0000c3 93ed      	ST   X+,R30
0000c4 93fc      	ST   X,R31
0000c5 940e 01ab 	CALL SUBOPT_0x3
0000c7 cfe9      	RJMP _0x12
                 _0x13:
                 ; 0000 0035 while (1){
                 _0x14:
                 ; 0000 0036       //Enviar datos de Poll
                 ; 0000 0037       for(i = 0; i < 7; i++)
0000c8 940e 019b 	CALL SUBOPT_0x0
                 _0x18:
0000ca 940e 01a1 	CALL SUBOPT_0x1
0000cc 9717      	SBIW R26,7
0000cd f44c      	BRGE _0x19
                 ; 0000 0038         putchar(poll[i]);
0000ce 940e 01a6 	CALL SUBOPT_0x2
0000d0 5de3      	SUBI R30,LOW(-_poll)
0000d1 4ffc      	SBCI R31,HIGH(-_poll)
0000d2 81a0      	LD   R26,Z
0000d3 d0bd      	RCALL _putchar
0000d4 940e 01ab 	CALL SUBOPT_0x3
0000d6 cff3      	RJMP _0x18
                 _0x19:
                 ; 0000 003B while (!( (*(unsigned char *) 0xc0) & (1<<5       )));
                 _0x1A:
0000d7 91e0 00c0 	LDS  R30,192
0000d9 72e0      	ANDI R30,LOW(0x20)
0000da f3e1      	BREQ _0x1A
                 ; 0000 003C       for(i = 0; i < 13; i++)
0000db 940e 019b 	CALL SUBOPT_0x0
                 _0x1E:
0000dd 940e 01a1 	CALL SUBOPT_0x1
0000df 971d      	SBIW R26,13
0000e0 f46c      	BRGE _0x1F
                 ; 0000 003D            respuestaPoll[i] = getchar();
0000e1 940e 01a6 	CALL SUBOPT_0x2
0000e3 5cec      	SUBI R30,LOW(-_respuestaPoll)
0000e4 4ffc      	SBCI R31,HIGH(-_respuestaPoll)
0000e5 93ff      	PUSH R31
0000e6 93ef      	PUSH R30
0000e7 d0a2      	RCALL _getchar
0000e8 91af      	POP  R26
0000e9 91bf      	POP  R27
0000ea 93ec      	ST   X,R30
0000eb 940e 01ab 	CALL SUBOPT_0x3
0000ed cfef      	RJMP _0x1E
                 _0x1F:
                 ; 0000 0040 delay_ms(5000);
0000ee e8a8      	LDI  R26,LOW(5000)
0000ef e1b3      	LDI  R27,HIGH(5000)
0000f0 940e 01bc 	CALL _delay_ms
                 ; 0000 0041 
                 ; 0000 0042       //Enviar datos de Tube Status
                 ; 0000 0043       for(i = 0; i < 7; i++)
0000f2 940e 019b 	CALL SUBOPT_0x0
                 _0x21:
0000f4 940e 01a1 	CALL SUBOPT_0x1
0000f6 9717      	SBIW R26,7
0000f7 f44c      	BRGE _0x22
                 ; 0000 0044         putchar(tubeStatus[i]);
0000f8 940e 01a6 	CALL SUBOPT_0x2
0000fa 5ae7      	SUBI R30,LOW(-_tubeStatus)
0000fb 4ffc      	SBCI R31,HIGH(-_tubeStatus)
0000fc 81a0      	LD   R26,Z
0000fd d093      	RCALL _putchar
0000fe 940e 01ab 	CALL SUBOPT_0x3
000100 cff3      	RJMP _0x21
                 _0x22:
                 ; 0000 0047 while (!( (*(unsigned char *) 0xc0) & (1<<5       )));
                 _0x23:
000101 91e0 00c0 	LDS  R30,192
000103 72e0      	ANDI R30,LOW(0x20)
000104 f3e1      	BREQ _0x23
                 ; 0000 0048       for(i = 0; i < 31; i++)
000105 940e 019b 	CALL SUBOPT_0x0
                 _0x27:
000107 940e 01a1 	CALL SUBOPT_0x1
000109 975f      	SBIW R26,31
00010a f46c      	BRGE _0x28
                 ; 0000 0049            respuestaTubeStatus[i] = getchar();
00010b 940e 01a6 	CALL SUBOPT_0x2
00010d 5ae0      	SUBI R30,LOW(-_respuestaTubeStatus)
00010e 4ffc      	SBCI R31,HIGH(-_respuestaTubeStatus)
00010f 93ff      	PUSH R31
000110 93ef      	PUSH R30
000111 d078      	RCALL _getchar
000112 91af      	POP  R26
000113 91bf      	POP  R27
000114 93ec      	ST   X,R30
000115 940e 01ab 	CALL SUBOPT_0x3
000117 cfef      	RJMP _0x27
                 _0x28:
                 ; 0000 004C delay_ms(2000);
000118 eda0      	LDI  R26,LOW(2000)
000119 e0b7      	LDI  R27,HIGH(2000)
00011a 940e 01bc 	CALL _delay_ms
                 ; 0000 004D 
                 ; 0000 004E      //Checar el byte donde está la cantidad de monedas de $1 instertadas
                 ; 0000 004F       contador = respuestaTubeStatus[17];
                +
00011c 91e0 0371+LDS R30 , _respuestaTubeStatus + ( 17 )
                 	__GETB1MN _respuestaTubeStatus,17
00011e e0f0      	LDI  R31,0
00011f 93e0 0382 	STS  _contador,R30
000121 93f0 0383 	STS  _contador+1,R31
                 ; 0000 0050 
                 ; 0000 0051       //Los LEDs indican en binario la cantidad de monedas que hay en el aceptador
                 ; 0000 0052       if(contador == 1){
000123 940e 01b3 	CALL SUBOPT_0x4
000125 9711      	SBIW R26,1
000126 f439      	BRNE _0x29
                 ; 0000 0053 
                 ; 0000 0054         PORTD.7 = 1;
000127 9a5f      	SBI  0xB,7
                 ; 0000 0055         delay_ms(1000);
000128 940e 01b8 	CALL SUBOPT_0x5
                 ; 0000 0056         PORTD.7 = 0;
00012a 985f      	CBI  0xB,7
                 ; 0000 0057         delay_ms(1000);
00012b eea8      	LDI  R26,LOW(1000)
00012c e0b3      	LDI  R27,HIGH(1000)
00012d c022      	RJMP _0x52
                 ; 0000 0058 
                 ; 0000 0059       } else if(contador == 2){
                 _0x29:
00012e 940e 01b3 	CALL SUBOPT_0x4
000130 9712      	SBIW R26,2
000131 f439      	BRNE _0x2F
                 ; 0000 005A 
                 ; 0000 005B         PORTD.6 = 1;
000132 9a5e      	SBI  0xB,6
                 ; 0000 005C         delay_ms(1000);
000133 940e 01b8 	CALL SUBOPT_0x5
                 ; 0000 005D         PORTD.6 = 0;
000135 985e      	CBI  0xB,6
                 ; 0000 005E         delay_ms(1000);
000136 eea8      	LDI  R26,LOW(1000)
000137 e0b3      	LDI  R27,HIGH(1000)
000138 c017      	RJMP _0x52
                 ; 0000 005F 
                 ; 0000 0060     } else if(contador == 3){
                 _0x2F:
000139 940e 01b3 	CALL SUBOPT_0x4
00013b 9713      	SBIW R26,3
00013c f449      	BRNE _0x35
                 ; 0000 0061 
                 ; 0000 0062         PORTD.6 = 1;
00013d 9a5e      	SBI  0xB,6
                 ; 0000 0063         PORTD.7 = 1;
00013e 9a5f      	SBI  0xB,7
                 ; 0000 0064         delay_ms(1000);
00013f 940e 01b8 	CALL SUBOPT_0x5
                 ; 0000 0065         PORTD.6 = 0;
000141 985e      	CBI  0xB,6
                 ; 0000 0066         PORTD.7 = 0;
000142 985f      	CBI  0xB,7
                 ; 0000 0067         delay_ms(1000);
000143 eea8      	LDI  R26,LOW(1000)
000144 e0b3      	LDI  R27,HIGH(1000)
000145 c00a      	RJMP _0x52
                 ; 0000 0068     }else{
                 _0x35:
                 ; 0000 0069 
                 ; 0000 006A         PORTD.6 = 1;
000146 9a5e      	SBI  0xB,6
                 ; 0000 006B         PORTD.7 = 1;
000147 9a5f      	SBI  0xB,7
                 ; 0000 006C         delay_ms(100);
000148 e6a4      	LDI  R26,LOW(100)
000149 e0b0      	LDI  R27,0
00014a 940e 01bc 	CALL _delay_ms
                 ; 0000 006D         PORTD.6 = 0;
00014c 985e      	CBI  0xB,6
                 ; 0000 006E         PORTD.7 = 0;
00014d 985f      	CBI  0xB,7
                 ; 0000 006F         delay_ms(100);
00014e e6a4      	LDI  R26,LOW(100)
00014f e0b0      	LDI  R27,0
                 _0x52:
000150 940e 01bc 	CALL _delay_ms
                 ; 0000 0070 
                 ; 0000 0071     }
                 ; 0000 0072 
                 ; 0000 0073     //Mandar comando para que el aceptador vaya soltando las monedas hasta que no quede ninguna
                 ; 0000 0074     if(contador > 0){
000152 940e 01b3 	CALL SUBOPT_0x4
000154 940e 01c6 	CALL __CPW02
000156 f568      	BRSH _0x47
                 ; 0000 0075     //Enviar datos de Dispense
                 ; 0000 0076       for(i = 0; i < 8; i++)
000157 940e 019b 	CALL SUBOPT_0x0
                 _0x49:
000159 940e 01a1 	CALL SUBOPT_0x1
00015b 9718      	SBIW R26,8
00015c f44c      	BRGE _0x4A
                 ; 0000 0077         putchar(dispenseUno[i]);
00015d 940e 01a6 	CALL SUBOPT_0x2
00015f 5bed      	SUBI R30,LOW(-_dispenseUno)
000160 4ffc      	SBCI R31,HIGH(-_dispenseUno)
000161 81a0      	LD   R26,Z
000162 d02e      	RCALL _putchar
000163 940e 01ab 	CALL SUBOPT_0x3
000165 cff3      	RJMP _0x49
                 _0x4A:
                 ; 0000 007A while (!( (*(unsigned char *) 0xc0) & (1<<5       )));
                 _0x4B:
000166 91e0 00c0 	LDS  R30,192
000168 72e0      	ANDI R30,LOW(0x20)
000169 f3e1      	BREQ _0x4B
                 ; 0000 007B       for(i = 0; i < 14; i++)
00016a 940e 019b 	CALL SUBOPT_0x0
                 _0x4F:
00016c 940e 01a1 	CALL SUBOPT_0x1
00016e 971e      	SBIW R26,14
00016f f46c      	BRGE _0x50
                 ; 0000 007C            respuestaDispense[i] = getchar();
000170 940e 01a6 	CALL SUBOPT_0x2
000172 5be5      	SUBI R30,LOW(-_respuestaDispense)
000173 4ffc      	SBCI R31,HIGH(-_respuestaDispense)
000174 93ff      	PUSH R31
000175 93ef      	PUSH R30
000176 d013      	RCALL _getchar
000177 91af      	POP  R26
000178 91bf      	POP  R27
000179 93ec      	ST   X,R30
00017a 940e 01ab 	CALL SUBOPT_0x3
00017c cfef      	RJMP _0x4F
                 _0x50:
                 ; 0000 007E contador--;
00017d e8a2      	LDI  R26,LOW(_contador)
00017e e0b3      	LDI  R27,HIGH(_contador)
00017f 91ed      	LD   R30,X+
000180 91fd      	LD   R31,X+
000181 9731      	SBIW R30,1
000182 93fe      	ST   -X,R31
000183 93ee      	ST   -X,R30
                 ; 0000 007F     }
                 ; 0000 0080 
                 ; 0000 0081       delay_ms(2000);
                 _0x47:
000184 eda0      	LDI  R26,LOW(2000)
000185 e0b7      	LDI  R27,HIGH(2000)
000186 940e 01bc 	CALL _delay_ms
                 ; 0000 0082   }
000188 cf3f      	RJMP _0x14
                 ; 0000 0083 }
                 _0x51:
000189 cfff      	RJMP _0x51
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 ; .FSTART _getchar
                 _0x2000003:
00018a 91e0 00c0 	LDS  R30,192
00018c 78e0      	ANDI R30,LOW(0x80)
00018d f3e1      	BREQ _0x2000003
00018e 91e0 00c6 	LDS  R30,198
000190 9508      	RET
                 ; .FEND
                 _putchar:
                 ; .FSTART _putchar
000191 93aa      	ST   -Y,R26
                 _0x2000006:
000192 91e0 00c0 	LDS  R30,192
000194 72e0      	ANDI R30,LOW(0x20)
000195 f3e1      	BREQ _0x2000006
000196 81e8      	LD   R30,Y
000197 93e0 00c6 	STS  198,R30
000199 9621      	ADIW R28,1
00019a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _coinType:
000300           	.BYTE 0xB
                 _respuestaCoinType:
00030b           	.BYTE 0x22
                 _poll:
00032d           	.BYTE 0x7
                 _respuestaPoll:
000334           	.BYTE 0xF
                 _dispenseUno:
000343           	.BYTE 0x8
                 _respuestaDispense:
00034b           	.BYTE 0xE
                 _tubeStatus:
000359           	.BYTE 0x7
                 _respuestaTubeStatus:
000360           	.BYTE 0x20
                 _i:
000380           	.BYTE 0x2
                 _contador:
000382           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x0:
00019b e0e0      	LDI  R30,LOW(0)
00019c 93e0 0380 	STS  _i,R30
00019e 93e0 0381 	STS  _i+1,R30
0001a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
0001a1 91a0 0380 	LDS  R26,_i
0001a3 91b0 0381 	LDS  R27,_i+1
0001a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x2:
0001a6 91e0 0380 	LDS  R30,_i
0001a8 91f0 0381 	LDS  R31,_i+1
0001aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:32 WORDS
                 SUBOPT_0x3:
0001ab e8a0      	LDI  R26,LOW(_i)
0001ac e0b3      	LDI  R27,HIGH(_i)
0001ad 91ed      	LD   R30,X+
0001ae 91fd      	LD   R31,X+
0001af 9631      	ADIW R30,1
0001b0 93fe      	ST   -X,R31
0001b1 93ee      	ST   -X,R30
0001b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0001b3 91a0 0382 	LDS  R26,_contador
0001b5 91b0 0383 	LDS  R27,_contador+1
0001b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0001b8 eea8      	LDI  R26,LOW(1000)
0001b9 e0b3      	LDI  R27,HIGH(1000)
0001ba 940c 01bc 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
0001bc 9610      	adiw r26,0
0001bd f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001be ef8a     +LDI R24 , LOW ( 0xFA )
0001bf e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001c0 9701     +SBIW R24 , 1
0001c1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001c2 95a8      	wdr
0001c3 9711      	sbiw r26,1
0001c4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001c5 9508      	ret
                 
                 __CPW02:
0001c6 2400      	CLR  R0
0001c7 160a      	CP   R0,R26
0001c8 060b      	CPC  R0,R27
0001c9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   7 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  41 r27:  23 r28:   2 r29:   1 r30:  69 r31:  25 
x  :  16 y  :   2 z  :  11 
Registers used: 14 out of 35 (40.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   3 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  45 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   1 cpi   :   0 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  28 ld    :   9 ldd   :   0 ldi   :  48 
lds   :  14 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   0 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :   6 pop   :   8 push  :   8 rcall :   8 ret   :   9 
reti  :   0 rjmp  :  14 rol   :   1 ror   :   0 sbc   :   0 sbci  :   7 
sbi   :   8 sbic  :   0 sbis  :   0 sbiw  :  17 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  13 std   :   0 sts   :  10 sub   :   0 subi  :   7 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 36 out of 116 (31.0%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000394    836     80    916   32768   2.8%
[.dseg] 0x000100 0x000384      0    132    132    2048   6.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
